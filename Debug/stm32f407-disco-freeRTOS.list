
stm32f407-disco-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001f50  08001f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001f90  08001f90  00011f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003db8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dc4  20003dc4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016e1c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002fdc  00000000  00000000  00036e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007122  00000000  00000000  00039e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  00040f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00041a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005e62  00000000  00000000  00042818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000494c  00000000  00000000  0004867a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004cfc6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001f08  00000000  00000000  0004d044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001f38 	.word	0x08001f38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08001f38 	.word	0x08001f38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f82f 	bl	8000560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f001 fc52 	bl	8001dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f001 fc2e 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d74 	.word	0x20003d74
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d74 	.word	0x20003d74

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b538      	push	{r3, r4, r5, lr}
 800053a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000540:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000542:	bf1c      	itt	ne
 8000544:	4b05      	ldrne	r3, [pc, #20]	; (800055c <HAL_Delay+0x24>)
 8000546:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000548:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800054a:	bf18      	it	ne
 800054c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800054e:	f7ff ffed 	bl	800052c <HAL_GetTick>
 8000552:	1b40      	subs	r0, r0, r5
 8000554:	4284      	cmp	r4, r0
 8000556:	d8fa      	bhi.n	800054e <HAL_Delay+0x16>
  {
  }
}
 8000558:	bd38      	pop	{r3, r4, r5, pc}
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000

08000560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000568:	041b      	lsls	r3, r3, #16
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000570:	0200      	lsls	r0, r0, #8
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800057a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800057c:	60d3      	str	r3, [r2, #12]
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	68dc      	ldr	r4, [r3, #12]
 800058a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000592:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	2b04      	cmp	r3, #4
 8000596:	bf28      	it	cs
 8000598:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	f04f 0501 	mov.w	r5, #1
 80005a0:	fa05 f303 	lsl.w	r3, r5, r3
 80005a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	bf8c      	ite	hi
 80005aa:	3c03      	subhi	r4, #3
 80005ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ae:	4019      	ands	r1, r3
 80005b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b2:	fa05 f404 	lsl.w	r4, r5, r4
 80005b6:	3c01      	subs	r4, #1
 80005b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	ea42 0201 	orr.w	r2, r2, r1
 80005c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c4:	bfaf      	iteee	ge
 80005c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	f000 000f 	andlt.w	r0, r0, #15
 80005ce:	4b06      	ldrlt	r3, [pc, #24]	; (80005e8 <HAL_NVIC_SetPriority+0x64>)
 80005d0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	bfa5      	ittet	ge
 80005d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	e000ed00 	.word	0xe000ed00
 80005e8:	e000ed14 	.word	0xe000ed14

080005ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005ec:	0942      	lsrs	r2, r0, #5
 80005ee:	2301      	movs	r3, #1
 80005f0:	f000 001f 	and.w	r0, r0, #31
 80005f4:	fa03 f000 	lsl.w	r0, r3, r0
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <HAL_NVIC_EnableIRQ+0x14>)
 80005fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100

08000604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000608:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800060a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80007bc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000610:	4a68      	ldr	r2, [pc, #416]	; (80007b4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000612:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80007c0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000616:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000618:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800061a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800061e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000620:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000624:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000628:	45b6      	cmp	lr, r6
 800062a:	f040 80ae 	bne.w	800078a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800062e:	684c      	ldr	r4, [r1, #4]
 8000630:	f024 0710 	bic.w	r7, r4, #16
 8000634:	2f02      	cmp	r7, #2
 8000636:	d116      	bne.n	8000666 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000638:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800063c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000640:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000644:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000648:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800064c:	f04f 0c0f 	mov.w	ip, #15
 8000650:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000654:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000658:	690d      	ldr	r5, [r1, #16]
 800065a:	fa05 f50b 	lsl.w	r5, r5, fp
 800065e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000662:	f8ca 5020 	str.w	r5, [sl, #32]
 8000666:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800066a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800066c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000670:	fa05 f50a 	lsl.w	r5, r5, sl
 8000674:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000676:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800067a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800067e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000682:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000684:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000688:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800068a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800068e:	d811      	bhi.n	80006b4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000690:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000692:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000696:	68cf      	ldr	r7, [r1, #12]
 8000698:	fa07 fc0a 	lsl.w	ip, r7, sl
 800069c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80006a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006a4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006a8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80006ac:	409f      	lsls	r7, r3
 80006ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80006b4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b8:	688f      	ldr	r7, [r1, #8]
 80006ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80006be:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006c0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006c2:	00e5      	lsls	r5, r4, #3
 80006c4:	d561      	bpl.n	800078a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	f04f 0b00 	mov.w	fp, #0
 80006ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80006ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006d2:	4d39      	ldr	r5, [pc, #228]	; (80007b8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006d8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006e0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006e4:	9703      	str	r7, [sp, #12]
 80006e6:	9f03      	ldr	r7, [sp, #12]
 80006e8:	f023 0703 	bic.w	r7, r3, #3
 80006ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006f0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006f4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000700:	f04f 0e0f 	mov.w	lr, #15
 8000704:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000708:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800070a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800070e:	d043      	beq.n	8000798 <HAL_GPIO_Init+0x194>
 8000710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000714:	42a8      	cmp	r0, r5
 8000716:	d041      	beq.n	800079c <HAL_GPIO_Init+0x198>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	d03f      	beq.n	80007a0 <HAL_GPIO_Init+0x19c>
 8000720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000724:	42a8      	cmp	r0, r5
 8000726:	d03d      	beq.n	80007a4 <HAL_GPIO_Init+0x1a0>
 8000728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072c:	42a8      	cmp	r0, r5
 800072e:	d03b      	beq.n	80007a8 <HAL_GPIO_Init+0x1a4>
 8000730:	4548      	cmp	r0, r9
 8000732:	d03b      	beq.n	80007ac <HAL_GPIO_Init+0x1a8>
 8000734:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000738:	42a8      	cmp	r0, r5
 800073a:	d039      	beq.n	80007b0 <HAL_GPIO_Init+0x1ac>
 800073c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000740:	42a8      	cmp	r0, r5
 8000742:	bf14      	ite	ne
 8000744:	2508      	movne	r5, #8
 8000746:	2507      	moveq	r5, #7
 8000748:	fa05 f50c 	lsl.w	r5, r5, ip
 800074c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000750:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000752:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000754:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000756:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800075a:	bf0c      	ite	eq
 800075c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800075e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000760:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000762:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000764:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000768:	bf0c      	ite	eq
 800076a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800076c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800076e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000770:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000772:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000776:	bf0c      	ite	eq
 8000778:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800077a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800077c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800077e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000780:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000782:	bf54      	ite	pl
 8000784:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000786:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000788:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078a:	3301      	adds	r3, #1
 800078c:	2b10      	cmp	r3, #16
 800078e:	f47f af44 	bne.w	800061a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000792:	b005      	add	sp, #20
 8000794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000798:	465d      	mov	r5, fp
 800079a:	e7d5      	b.n	8000748 <HAL_GPIO_Init+0x144>
 800079c:	2501      	movs	r5, #1
 800079e:	e7d3      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007a0:	2502      	movs	r5, #2
 80007a2:	e7d1      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007a4:	2503      	movs	r5, #3
 80007a6:	e7cf      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007a8:	2504      	movs	r5, #4
 80007aa:	e7cd      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007ac:	2505      	movs	r5, #5
 80007ae:	e7cb      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007b0:	2506      	movs	r5, #6
 80007b2:	e7c9      	b.n	8000748 <HAL_GPIO_Init+0x144>
 80007b4:	40013c00 	.word	0x40013c00
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40021400 	.word	0x40021400

080007c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c4:	b10a      	cbz	r2, 80007ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007c6:	6181      	str	r1, [r0, #24]
 80007c8:	4770      	bx	lr
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	e7fb      	b.n	80007c6 <HAL_GPIO_WritePin+0x2>

080007ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80007ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 80007d0:	4604      	mov	r4, r0
 80007d2:	b1d8      	cbz	r0, 800080c <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80007d4:	6803      	ldr	r3, [r0, #0]
 80007d6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80007da:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80007dc:	f245 5255 	movw	r2, #21845	; 0x5555
 80007e0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80007e2:	6842      	ldr	r2, [r0, #4]
 80007e4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80007e6:	6882      	ldr	r2, [r0, #8]
 80007e8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80007ea:	f7ff fe9f 	bl	800052c <HAL_GetTick>
 80007ee:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	68d8      	ldr	r0, [r3, #12]
 80007f4:	b918      	cbnz	r0, 80007fe <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80007f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80007fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80007fc:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 80007fe:	f7ff fe95 	bl	800052c <HAL_GetTick>
 8000802:	1b40      	subs	r0, r0, r5
 8000804:	2830      	cmp	r0, #48	; 0x30
 8000806:	d9f3      	bls.n	80007f0 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8000808:	2003      	movs	r0, #3
}
 800080a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
 800080e:	bd38      	pop	{r3, r4, r5, pc}

08000810 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000810:	6803      	ldr	r3, [r0, #0]
 8000812:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000816:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000818:	2000      	movs	r0, #0
 800081a:	4770      	bx	lr

0800081c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800081c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000820:	4604      	mov	r4, r0
 8000822:	b918      	cbnz	r0, 800082c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000824:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000826:	b002      	add	sp, #8
 8000828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800082c:	6803      	ldr	r3, [r0, #0]
 800082e:	07dd      	lsls	r5, r3, #31
 8000830:	d410      	bmi.n	8000854 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	0798      	lsls	r0, r3, #30
 8000836:	d458      	bmi.n	80008ea <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000838:	6823      	ldr	r3, [r4, #0]
 800083a:	071a      	lsls	r2, r3, #28
 800083c:	f100 809a 	bmi.w	8000974 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	075b      	lsls	r3, r3, #29
 8000844:	f100 80b8 	bmi.w	80009b8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000848:	69a2      	ldr	r2, [r4, #24]
 800084a:	2a00      	cmp	r2, #0
 800084c:	f040 8119 	bne.w	8000a82 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000850:	2000      	movs	r0, #0
 8000852:	e7e8      	b.n	8000826 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000854:	4ba6      	ldr	r3, [pc, #664]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	f002 020c 	and.w	r2, r2, #12
 800085c:	2a04      	cmp	r2, #4
 800085e:	d007      	beq.n	8000870 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000866:	2a08      	cmp	r2, #8
 8000868:	d10a      	bne.n	8000880 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	0259      	lsls	r1, r3, #9
 800086e:	d507      	bpl.n	8000880 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000870:	4b9f      	ldr	r3, [pc, #636]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	039a      	lsls	r2, r3, #14
 8000876:	d5dc      	bpl.n	8000832 <HAL_RCC_OscConfig+0x16>
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1d9      	bne.n	8000832 <HAL_RCC_OscConfig+0x16>
 800087e:	e7d1      	b.n	8000824 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000880:	6863      	ldr	r3, [r4, #4]
 8000882:	4d9b      	ldr	r5, [pc, #620]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000888:	d111      	bne.n	80008ae <HAL_RCC_OscConfig+0x92>
 800088a:	682b      	ldr	r3, [r5, #0]
 800088c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000890:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000892:	f7ff fe4b 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000896:	4d96      	ldr	r5, [pc, #600]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000898:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089a:	682b      	ldr	r3, [r5, #0]
 800089c:	039b      	lsls	r3, r3, #14
 800089e:	d4c8      	bmi.n	8000832 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008a0:	f7ff fe44 	bl	800052c <HAL_GetTick>
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	2864      	cmp	r0, #100	; 0x64
 80008a8:	d9f7      	bls.n	800089a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80008aa:	2003      	movs	r0, #3
 80008ac:	e7bb      	b.n	8000826 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008b2:	d104      	bne.n	80008be <HAL_RCC_OscConfig+0xa2>
 80008b4:	682b      	ldr	r3, [r5, #0]
 80008b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ba:	602b      	str	r3, [r5, #0]
 80008bc:	e7e5      	b.n	800088a <HAL_RCC_OscConfig+0x6e>
 80008be:	682a      	ldr	r2, [r5, #0]
 80008c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008c4:	602a      	str	r2, [r5, #0]
 80008c6:	682a      	ldr	r2, [r5, #0]
 80008c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008cc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1df      	bne.n	8000892 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80008d2:	f7ff fe2b 	bl	800052c <HAL_GetTick>
 80008d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008d8:	682b      	ldr	r3, [r5, #0]
 80008da:	039f      	lsls	r7, r3, #14
 80008dc:	d5a9      	bpl.n	8000832 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008de:	f7ff fe25 	bl	800052c <HAL_GetTick>
 80008e2:	1b80      	subs	r0, r0, r6
 80008e4:	2864      	cmp	r0, #100	; 0x64
 80008e6:	d9f7      	bls.n	80008d8 <HAL_RCC_OscConfig+0xbc>
 80008e8:	e7df      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ea:	4b81      	ldr	r3, [pc, #516]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	f012 0f0c 	tst.w	r2, #12
 80008f2:	d007      	beq.n	8000904 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008fa:	2a08      	cmp	r2, #8
 80008fc:	d111      	bne.n	8000922 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	025e      	lsls	r6, r3, #9
 8000902:	d40e      	bmi.n	8000922 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000904:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	0795      	lsls	r5, r2, #30
 800090a:	d502      	bpl.n	8000912 <HAL_RCC_OscConfig+0xf6>
 800090c:	68e2      	ldr	r2, [r4, #12]
 800090e:	2a01      	cmp	r2, #1
 8000910:	d188      	bne.n	8000824 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	6921      	ldr	r1, [r4, #16]
 8000916:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800091a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800091e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000920:	e78a      	b.n	8000838 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000922:	68e2      	ldr	r2, [r4, #12]
 8000924:	4b73      	ldr	r3, [pc, #460]	; (8000af4 <HAL_RCC_OscConfig+0x2d8>)
 8000926:	b1b2      	cbz	r2, 8000956 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092c:	f7ff fdfe 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000930:	4d6f      	ldr	r5, [pc, #444]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000932:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000934:	682b      	ldr	r3, [r5, #0]
 8000936:	0798      	lsls	r0, r3, #30
 8000938:	d507      	bpl.n	800094a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	6922      	ldr	r2, [r4, #16]
 800093e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000942:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000946:	602b      	str	r3, [r5, #0]
 8000948:	e776      	b.n	8000838 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800094a:	f7ff fdef 	bl	800052c <HAL_GetTick>
 800094e:	1b80      	subs	r0, r0, r6
 8000950:	2802      	cmp	r0, #2
 8000952:	d9ef      	bls.n	8000934 <HAL_RCC_OscConfig+0x118>
 8000954:	e7a9      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fde8 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800095c:	4d64      	ldr	r5, [pc, #400]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800095e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	0799      	lsls	r1, r3, #30
 8000964:	f57f af68 	bpl.w	8000838 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fde0 	bl	800052c <HAL_GetTick>
 800096c:	1b80      	subs	r0, r0, r6
 800096e:	2802      	cmp	r0, #2
 8000970:	d9f6      	bls.n	8000960 <HAL_RCC_OscConfig+0x144>
 8000972:	e79a      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000974:	6962      	ldr	r2, [r4, #20]
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <HAL_RCC_OscConfig+0x2dc>)
 8000978:	b17a      	cbz	r2, 800099a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800097e:	f7ff fdd5 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	4d5b      	ldr	r5, [pc, #364]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000984:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000986:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000988:	079f      	lsls	r7, r3, #30
 800098a:	f53f af59 	bmi.w	8000840 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800098e:	f7ff fdcd 	bl	800052c <HAL_GetTick>
 8000992:	1b80      	subs	r0, r0, r6
 8000994:	2802      	cmp	r0, #2
 8000996:	d9f6      	bls.n	8000986 <HAL_RCC_OscConfig+0x16a>
 8000998:	e787      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800099a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800099c:	f7ff fdc6 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a0:	4d53      	ldr	r5, [pc, #332]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009a6:	0798      	lsls	r0, r3, #30
 80009a8:	f57f af4a 	bpl.w	8000840 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fdbe 	bl	800052c <HAL_GetTick>
 80009b0:	1b80      	subs	r0, r0, r6
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9f6      	bls.n	80009a4 <HAL_RCC_OscConfig+0x188>
 80009b6:	e778      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b8:	4b4d      	ldr	r3, [pc, #308]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 80009ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009bc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009c0:	d128      	bne.n	8000a14 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	9201      	str	r2, [sp, #4]
 80009c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ca:	641a      	str	r2, [r3, #64]	; 0x40
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009d6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d8:	4d48      	ldr	r5, [pc, #288]	; (8000afc <HAL_RCC_OscConfig+0x2e0>)
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	05d9      	lsls	r1, r3, #23
 80009de:	d51b      	bpl.n	8000a18 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e0:	68a3      	ldr	r3, [r4, #8]
 80009e2:	4d43      	ldr	r5, [pc, #268]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d127      	bne.n	8000a38 <HAL_RCC_OscConfig+0x21c>
 80009e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009f0:	f7ff fd9c 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009f4:	4d3e      	ldr	r5, [pc, #248]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009f6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009f8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009fe:	079b      	lsls	r3, r3, #30
 8000a00:	d539      	bpl.n	8000a76 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	f43f af20 	beq.w	8000848 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a08:	4a39      	ldr	r2, [pc, #228]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000a0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	e719      	b.n	8000848 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a14:	2600      	movs	r6, #0
 8000a16:	e7df      	b.n	80009d8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a18:	682b      	ldr	r3, [r5, #0]
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a20:	f7ff fd84 	bl	800052c <HAL_GetTick>
 8000a24:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	05da      	lsls	r2, r3, #23
 8000a2a:	d4d9      	bmi.n	80009e0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a2c:	f7ff fd7e 	bl	800052c <HAL_GetTick>
 8000a30:	1bc0      	subs	r0, r0, r7
 8000a32:	2802      	cmp	r0, #2
 8000a34:	d9f7      	bls.n	8000a26 <HAL_RCC_OscConfig+0x20a>
 8000a36:	e738      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d104      	bne.n	8000a46 <HAL_RCC_OscConfig+0x22a>
 8000a3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	672b      	str	r3, [r5, #112]	; 0x70
 8000a44:	e7d0      	b.n	80009e8 <HAL_RCC_OscConfig+0x1cc>
 8000a46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a48:	f022 0201 	bic.w	r2, r2, #1
 8000a4c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a4e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a50:	f022 0204 	bic.w	r2, r2, #4
 8000a54:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1ca      	bne.n	80009f0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fd67 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a62:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a66:	0798      	lsls	r0, r3, #30
 8000a68:	d5cb      	bpl.n	8000a02 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f7ff fd5f 	bl	800052c <HAL_GetTick>
 8000a6e:	1bc0      	subs	r0, r0, r7
 8000a70:	4540      	cmp	r0, r8
 8000a72:	d9f7      	bls.n	8000a64 <HAL_RCC_OscConfig+0x248>
 8000a74:	e719      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a76:	f7ff fd59 	bl	800052c <HAL_GetTick>
 8000a7a:	1bc0      	subs	r0, r0, r7
 8000a7c:	4540      	cmp	r0, r8
 8000a7e:	d9bd      	bls.n	80009fc <HAL_RCC_OscConfig+0x1e0>
 8000a80:	e713      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a82:	4d1b      	ldr	r5, [pc, #108]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
 8000a84:	68ab      	ldr	r3, [r5, #8]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	f43f aeca 	beq.w	8000824 <HAL_RCC_OscConfig+0x8>
 8000a90:	4e1b      	ldr	r6, [pc, #108]	; (8000b00 <HAL_RCC_OscConfig+0x2e4>)
 8000a92:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a94:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a96:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a98:	d134      	bne.n	8000b04 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a9a:	f7ff fd47 	bl	800052c <HAL_GetTick>
 8000a9e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	0199      	lsls	r1, r3, #6
 8000aa4:	d41e      	bmi.n	8000ae4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000aa6:	6a22      	ldr	r2, [r4, #32]
 8000aa8:	69e3      	ldr	r3, [r4, #28]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aae:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ab2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ab4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ab8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aba:	4c0d      	ldr	r4, [pc, #52]	; (8000af0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000abc:	0852      	lsrs	r2, r2, #1
 8000abe:	3a01      	subs	r2, #1
 8000ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ac4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000aca:	f7ff fd2f 	bl	800052c <HAL_GetTick>
 8000ace:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ad0:	6823      	ldr	r3, [r4, #0]
 8000ad2:	019a      	lsls	r2, r3, #6
 8000ad4:	f53f aebc 	bmi.w	8000850 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad8:	f7ff fd28 	bl	800052c <HAL_GetTick>
 8000adc:	1b40      	subs	r0, r0, r5
 8000ade:	2802      	cmp	r0, #2
 8000ae0:	d9f6      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x2b4>
 8000ae2:	e6e2      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae4:	f7ff fd22 	bl	800052c <HAL_GetTick>
 8000ae8:	1bc0      	subs	r0, r0, r7
 8000aea:	2802      	cmp	r0, #2
 8000aec:	d9d8      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x284>
 8000aee:	e6dc      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
 8000af0:	40023800 	.word	0x40023800
 8000af4:	42470000 	.word	0x42470000
 8000af8:	42470e80 	.word	0x42470e80
 8000afc:	40007000 	.word	0x40007000
 8000b00:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b04:	f7ff fd12 	bl	800052c <HAL_GetTick>
 8000b08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	f57f ae9f 	bpl.w	8000850 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b12:	f7ff fd0b 	bl	800052c <HAL_GetTick>
 8000b16:	1b00      	subs	r0, r0, r4
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9f6      	bls.n	8000b0a <HAL_RCC_OscConfig+0x2ee>
 8000b1c:	e6c5      	b.n	80008aa <HAL_RCC_OscConfig+0x8e>
 8000b1e:	bf00      	nop

08000b20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b20:	4913      	ldr	r1, [pc, #76]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b24:	688b      	ldr	r3, [r1, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d003      	beq.n	8000b36 <HAL_RCC_GetSysClockFreq+0x16>
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d003      	beq.n	8000b3a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b32:	4810      	ldr	r0, [pc, #64]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b34:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b36:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
 8000b38:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b3a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b3c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b40:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b44:	bf14      	ite	ne
 8000b46:	480c      	ldrne	r0, [pc, #48]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b48:	480a      	ldreq	r0, [pc, #40]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b4e:	bf18      	it	ne
 8000b50:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b52:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b56:	fba1 0100 	umull	r0, r1, r1, r0
 8000b5a:	f7ff fb39 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b66:	3301      	adds	r3, #1
 8000b68:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	00f42400 	.word	0x00f42400
 8000b78:	007a1200 	.word	0x007a1200

08000b7c <HAL_RCC_ClockConfig>:
{
 8000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b82:	4604      	mov	r4, r0
 8000b84:	b910      	cbnz	r0, 8000b8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b8c:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f002 020f 	and.w	r2, r2, #15
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d328      	bcc.n	8000bea <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b98:	6821      	ldr	r1, [r4, #0]
 8000b9a:	078f      	lsls	r7, r1, #30
 8000b9c:	d42d      	bmi.n	8000bfa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b9e:	07c8      	lsls	r0, r1, #31
 8000ba0:	d440      	bmi.n	8000c24 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f002 020f 	and.w	r2, r2, #15
 8000baa:	4295      	cmp	r5, r2
 8000bac:	d366      	bcc.n	8000c7c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	0751      	lsls	r1, r2, #29
 8000bb2:	d46c      	bmi.n	8000c8e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bb4:	0713      	lsls	r3, r2, #28
 8000bb6:	d507      	bpl.n	8000bc8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000bba:	6921      	ldr	r1, [r4, #16]
 8000bbc:	6893      	ldr	r3, [r2, #8]
 8000bbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bc6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000bc8:	f7ff ffaa 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000bce:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_RCC_ClockConfig+0x12c>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	40d8      	lsrs	r0, r3
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_RCC_ClockConfig+0x130>)
 8000bdc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f001 f8e4 	bl	8001dac <HAL_InitTick>
  return HAL_OK;
 8000be4:	2000      	movs	r0, #0
 8000be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d1c6      	bne.n	8000b86 <HAL_RCC_ClockConfig+0xa>
 8000bf8:	e7ce      	b.n	8000b98 <HAL_RCC_ClockConfig+0x1c>
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bfc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c00:	bf1e      	ittt	ne
 8000c02:	689a      	ldrne	r2, [r3, #8]
 8000c04:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c08:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c0a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c0c:	bf42      	ittt	mi
 8000c0e:	689a      	ldrmi	r2, [r3, #8]
 8000c10:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c14:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	68a0      	ldr	r0, [r4, #8]
 8000c1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c1e:	4302      	orrs	r2, r0
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	e7bc      	b.n	8000b9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c24:	6862      	ldr	r2, [r4, #4]
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c28:	2a01      	cmp	r2, #1
 8000c2a:	d11d      	bne.n	8000c68 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c32:	d0a8      	beq.n	8000b86 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c34:	4e1b      	ldr	r6, [pc, #108]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c36:	68b3      	ldr	r3, [r6, #8]
 8000c38:	f023 0303 	bic.w	r3, r3, #3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000c40:	f7ff fc74 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c44:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c4a:	68b3      	ldr	r3, [r6, #8]
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c56:	d0a4      	beq.n	8000ba2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c58:	f7ff fc68 	bl	800052c <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	4540      	cmp	r0, r8
 8000c60:	d9f3      	bls.n	8000c4a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c62:	2003      	movs	r0, #3
}
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c68:	1e91      	subs	r1, r2, #2
 8000c6a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c6e:	d802      	bhi.n	8000c76 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c74:	e7dd      	b.n	8000c32 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c76:	f013 0f02 	tst.w	r3, #2
 8000c7a:	e7da      	b.n	8000c32 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7c:	b2ea      	uxtb	r2, r5
 8000c7e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	429d      	cmp	r5, r3
 8000c88:	f47f af7d 	bne.w	8000b86 <HAL_RCC_ClockConfig+0xa>
 8000c8c:	e78f      	b.n	8000bae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c8e:	4905      	ldr	r1, [pc, #20]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c90:	68e0      	ldr	r0, [r4, #12]
 8000c92:	688b      	ldr	r3, [r1, #8]
 8000c94:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c98:	4303      	orrs	r3, r0
 8000c9a:	608b      	str	r3, [r1, #8]
 8000c9c:	e78a      	b.n	8000bb4 <HAL_RCC_ClockConfig+0x38>
 8000c9e:	bf00      	nop
 8000ca0:	40023c00 	.word	0x40023c00
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	08001f75 	.word	0x08001f75
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cbe:	6810      	ldr	r0, [r2, #0]
}
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	08001f85 	.word	0x08001f85
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_RCC_GetClockConfig+0x34>)
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	f002 0203 	and.w	r2, r2, #3
 8000cdc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000ce4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000cec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cf6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_RCC_GetClockConfig+0x38>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 030f 	and.w	r3, r3, #15
 8000d00:	600b      	str	r3, [r1, #0]
 8000d02:	4770      	bx	lr
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_TIM_Base_MspInit>:
 8000d0c:	4770      	bx	lr

08000d0e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d0e:	6803      	ldr	r3, [r0, #0]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d24:	4770      	bx	lr

08000d26 <HAL_TIM_IC_CaptureCallback>:
 8000d26:	4770      	bx	lr

08000d28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d28:	4770      	bx	lr

08000d2a <HAL_TIM_TriggerCallback>:
 8000d2a:	4770      	bx	lr

08000d2c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d2c:	6803      	ldr	r3, [r0, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	0791      	lsls	r1, r2, #30
{
 8000d32:	b510      	push	{r4, lr}
 8000d34:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d36:	d50e      	bpl.n	8000d56 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	0792      	lsls	r2, r2, #30
 8000d3c:	d50b      	bpl.n	8000d56 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d3e:	f06f 0202 	mvn.w	r2, #2
 8000d42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d44:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d46:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d48:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d4a:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d4c:	d077      	beq.n	8000e3e <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d4e:	f7ff ffea 	bl	8000d26 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d52:	2300      	movs	r3, #0
 8000d54:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	0750      	lsls	r0, r2, #29
 8000d5c:	d510      	bpl.n	8000d80 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	0751      	lsls	r1, r2, #29
 8000d62:	d50d      	bpl.n	8000d80 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d64:	f06f 0204 	mvn.w	r2, #4
 8000d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d6a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d6c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d6e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d72:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d74:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d76:	d068      	beq.n	8000e4a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d78:	f7ff ffd5 	bl	8000d26 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	0712      	lsls	r2, r2, #28
 8000d86:	d50f      	bpl.n	8000da8 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	0710      	lsls	r0, r2, #28
 8000d8c:	d50c      	bpl.n	8000da8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d8e:	f06f 0208 	mvn.w	r2, #8
 8000d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d94:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d96:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d98:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d9a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d9c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d9e:	d05a      	beq.n	8000e56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000da0:	f7ff ffc1 	bl	8000d26 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da4:	2300      	movs	r3, #0
 8000da6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	06d2      	lsls	r2, r2, #27
 8000dae:	d510      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	06d0      	lsls	r0, r2, #27
 8000db4:	d50d      	bpl.n	8000dd2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000db6:	f06f 0210 	mvn.w	r2, #16
 8000dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dbc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dbe:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dc0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000dc4:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dc8:	d04b      	beq.n	8000e62 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dca:	f7ff ffac 	bl	8000d26 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	07d1      	lsls	r1, r2, #31
 8000dd8:	d508      	bpl.n	8000dec <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	07d2      	lsls	r2, r2, #31
 8000dde:	d505      	bpl.n	8000dec <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000de0:	f06f 0201 	mvn.w	r2, #1
 8000de4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000de6:	4620      	mov	r0, r4
 8000de8:	f000 ffb4 	bl	8001d54 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	0610      	lsls	r0, r2, #24
 8000df2:	d508      	bpl.n	8000e06 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	0611      	lsls	r1, r2, #24
 8000df8:	d505      	bpl.n	8000e06 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e00:	4620      	mov	r0, r4
 8000e02:	f000 f8b4 	bl	8000f6e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	691a      	ldr	r2, [r3, #16]
 8000e0a:	0652      	lsls	r2, r2, #25
 8000e0c:	d508      	bpl.n	8000e20 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	0650      	lsls	r0, r2, #25
 8000e12:	d505      	bpl.n	8000e20 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e18:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff ff85 	bl	8000d2a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	0691      	lsls	r1, r2, #26
 8000e26:	d522      	bpl.n	8000e6e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	0692      	lsls	r2, r2, #26
 8000e2c:	d51f      	bpl.n	8000e6e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e2e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e34:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e3a:	f000 b897 	b.w	8000f6c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e3e:	f7ff ff71 	bl	8000d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e42:	4620      	mov	r0, r4
 8000e44:	f7ff ff70 	bl	8000d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e48:	e783      	b.n	8000d52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4a:	f7ff ff6b 	bl	8000d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff ff6a 	bl	8000d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e54:	e792      	b.n	8000d7c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e56:	f7ff ff65 	bl	8000d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f7ff ff64 	bl	8000d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e60:	e7a0      	b.n	8000da4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e62:	f7ff ff5f 	bl	8000d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ff5e 	bl	8000d28 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e6c:	e7af      	b.n	8000dce <HAL_TIM_IRQHandler+0xa2>
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e70:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000e72:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000e74:	4290      	cmp	r0, r2
 8000e76:	d012      	beq.n	8000e9e <TIM_Base_SetConfig+0x2e>
 8000e78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e7c:	d00f      	beq.n	8000e9e <TIM_Base_SetConfig+0x2e>
 8000e7e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d00b      	beq.n	8000e9e <TIM_Base_SetConfig+0x2e>
 8000e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	d007      	beq.n	8000e9e <TIM_Base_SetConfig+0x2e>
 8000e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d003      	beq.n	8000e9e <TIM_Base_SetConfig+0x2e>
 8000e96:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d11d      	bne.n	8000eda <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e9e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ea4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <TIM_Base_SetConfig+0xbc>)
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	d104      	bne.n	8000eb6 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	e028      	b.n	8000f08 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000eb6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eba:	d0f7      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <TIM_Base_SetConfig+0xc0>)
 8000ebe:	4290      	cmp	r0, r2
 8000ec0:	d0f4      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ec2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec6:	4290      	cmp	r0, r2
 8000ec8:	d0f0      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ece:	4290      	cmp	r0, r2
 8000ed0:	d0ec      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ed2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	d0e8      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <TIM_Base_SetConfig+0xc4>)
 8000edc:	4290      	cmp	r0, r2
 8000ede:	d0e5      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee4:	4290      	cmp	r0, r2
 8000ee6:	d0e1      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eec:	4290      	cmp	r0, r2
 8000eee:	d0dd      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ef0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	d0d9      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000ef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000efc:	4290      	cmp	r0, r2
 8000efe:	d0d5      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
 8000f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f04:	4290      	cmp	r0, r2
 8000f06:	d0d1      	beq.n	8000eac <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000f08:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f0a:	688b      	ldr	r3, [r1, #8]
 8000f0c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f0e:	680b      	ldr	r3, [r1, #0]
 8000f10:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <TIM_Base_SetConfig+0xbc>)
 8000f14:	4298      	cmp	r0, r3
 8000f16:	d006      	beq.n	8000f26 <TIM_Base_SetConfig+0xb6>
 8000f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f1c:	4298      	cmp	r0, r3
 8000f1e:	d002      	beq.n	8000f26 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f20:	2301      	movs	r3, #1
 8000f22:	6143      	str	r3, [r0, #20]
}
 8000f24:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f26:	690b      	ldr	r3, [r1, #16]
 8000f28:	6303      	str	r3, [r0, #48]	; 0x30
 8000f2a:	e7f9      	b.n	8000f20 <TIM_Base_SetConfig+0xb0>
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40000400 	.word	0x40000400
 8000f34:	40014000 	.word	0x40014000

08000f38 <HAL_TIM_Base_Init>:
{ 
 8000f38:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	b1a0      	cbz	r0, 8000f68 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f46:	b91b      	cbnz	r3, 8000f50 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f48:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f4c:	f7ff fede 	bl	8000d0c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f50:	2302      	movs	r3, #2
 8000f52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	1d21      	adds	r1, r4, #4
 8000f5a:	f7ff ff89 	bl	8000e70 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000f64:	2000      	movs	r0, #0
 8000f66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
}
 8000f6a:	bd10      	pop	{r4, pc}

08000f6c <HAL_TIMEx_CommutationCallback>:
 8000f6c:	4770      	bx	lr

08000f6e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f6e:	4770      	bx	lr

08000f70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f70:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f72:	f000 fbd9 	bl	8001728 <vTaskStartScheduler>
  
  return osOK;
}
 8000f76:	2000      	movs	r0, #0
 8000f78:	bd08      	pop	{r3, pc}

08000f7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f7a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f7c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000f80:	8a02      	ldrh	r2, [r0, #16]
{
 8000f82:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f84:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000f88:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000f8a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000f8c:	bf14      	ite	ne
 8000f8e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f90:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f92:	a803      	add	r0, sp, #12
 8000f94:	9001      	str	r0, [sp, #4]
 8000f96:	9400      	str	r4, [sp, #0]
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f000 faf5 	bl	8001588 <xTaskCreate>
 8000f9e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000fa0:	bf0c      	ite	eq
 8000fa2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000fa4:	2000      	movne	r0, #0
}
 8000fa6:	b005      	add	sp, #20
 8000fa8:	bd30      	pop	{r4, r5, pc}

08000faa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000faa:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000fac:	2800      	cmp	r0, #0
 8000fae:	bf08      	it	eq
 8000fb0:	2001      	moveq	r0, #1
 8000fb2:	f000 fd07 	bl	80019c4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	bd08      	pop	{r3, pc}

08000fba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fba:	f100 0308 	add.w	r3, r0, #8
 8000fbe:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fc4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fc6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fc8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fca:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fcc:	6003      	str	r3, [r0, #0]
 8000fce:	4770      	bx	lr

08000fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6103      	str	r3, [r0, #16]
 8000fd4:	4770      	bx	lr

08000fd6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000fd6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000fd8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fe2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fe4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fe6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000fe8:	3301      	adds	r3, #1
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	4770      	bx	lr

08000fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fee:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ff0:	1c53      	adds	r3, r2, #1
{
 8000ff2:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000ff4:	d10a      	bne.n	800100c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ff6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ffc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ffe:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001000:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001002:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001004:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001006:	3301      	adds	r3, #1
 8001008:	6003      	str	r3, [r0, #0]
 800100a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800100c:	f100 0308 	add.w	r3, r0, #8
 8001010:	685c      	ldr	r4, [r3, #4]
 8001012:	6825      	ldr	r5, [r4, #0]
 8001014:	42aa      	cmp	r2, r5
 8001016:	d3ef      	bcc.n	8000ff8 <vListInsert+0xa>
 8001018:	4623      	mov	r3, r4
 800101a:	e7f9      	b.n	8001010 <vListInsert+0x22>

0800101c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800101c:	6841      	ldr	r1, [r0, #4]
 800101e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001020:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001022:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001024:	6882      	ldr	r2, [r0, #8]
 8001026:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001028:	6859      	ldr	r1, [r3, #4]
 800102a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800102c:	bf08      	it	eq
 800102e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001030:	2200      	movs	r2, #0
 8001032:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	3801      	subs	r0, #1
 8001038:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800103a:	4770      	bx	lr

0800103c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <prvTaskExitError+0x2c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	d008      	beq.n	8001056 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001048:	f383 8811 	msr	BASEPRI, r3
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f3bf 8f4f 	dsb	sy
 8001054:	e7fe      	b.n	8001054 <prvTaskExitError+0x18>
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	e7fe      	b.n	8001066 <prvTaskExitError+0x2a>
 8001068:	20000004 	.word	0x20000004

0800106c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800106c:	4806      	ldr	r0, [pc, #24]	; (8001088 <prvPortStartFirstTask+0x1c>)
 800106e:	6800      	ldr	r0, [r0, #0]
 8001070:	6800      	ldr	r0, [r0, #0]
 8001072:	f380 8808 	msr	MSP, r0
 8001076:	b662      	cpsie	i
 8001078:	b661      	cpsie	f
 800107a:	f3bf 8f4f 	dsb	sy
 800107e:	f3bf 8f6f 	isb	sy
 8001082:	df00      	svc	0
 8001084:	bf00      	nop
 8001086:	0000      	.short	0x0000
 8001088:	e000ed08 	.word	0xe000ed08

0800108c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800108c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800109c <vPortEnableVFP+0x10>
 8001090:	6801      	ldr	r1, [r0, #0]
 8001092:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001096:	6001      	str	r1, [r0, #0]
 8001098:	4770      	bx	lr
 800109a:	0000      	.short	0x0000
 800109c:	e000ed88 	.word	0xe000ed88

080010a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80010a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <pxPortInitialiseStack+0x28>)
 80010aa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80010ae:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80010b2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80010b6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80010ba:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80010be:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80010c2:	3844      	subs	r0, #68	; 0x44
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	0800103d 	.word	0x0800103d
 80010cc:	00000000 	.word	0x00000000

080010d0 <SVC_Handler>:
	__asm volatile (
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <pxCurrentTCBConst2>)
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	6808      	ldr	r0, [r1, #0]
 80010d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010da:	f380 8809 	msr	PSP, r0
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	f380 8811 	msr	BASEPRI, r0
 80010ea:	4770      	bx	lr
 80010ec:	f3af 8000 	nop.w

080010f0 <pxCurrentTCBConst2>:
 80010f0:	20003c48 	.word	0x20003c48

080010f4 <vPortEnterCritical>:
 80010f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f8:	f383 8811 	msr	BASEPRI, r3
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <vPortEnterCritical+0x3c>)
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800110a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800110c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800110e:	d10d      	bne.n	800112c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <vPortEnterCritical+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001118:	d008      	beq.n	800112c <vPortEnterCritical+0x38>
 800111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111e:	f383 8811 	msr	BASEPRI, r3
 8001122:	f3bf 8f6f 	isb	sy
 8001126:	f3bf 8f4f 	dsb	sy
 800112a:	e7fe      	b.n	800112a <vPortEnterCritical+0x36>
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000004 	.word	0x20000004
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <vPortExitCritical+0x24>)
 800113a:	6813      	ldr	r3, [r2, #0]
 800113c:	b943      	cbnz	r3, 8001150 <vPortExitCritical+0x18>
 800113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001142:	f383 8811 	msr	BASEPRI, r3
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	f3bf 8f4f 	dsb	sy
 800114e:	e7fe      	b.n	800114e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001150:	3b01      	subs	r3, #1
 8001152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001154:	b90b      	cbnz	r3, 800115a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001156:	f383 8811 	msr	BASEPRI, r3
 800115a:	4770      	bx	lr
 800115c:	20000004 	.word	0x20000004

08001160 <PendSV_Handler>:
	__asm volatile
 8001160:	f3ef 8009 	mrs	r0, PSP
 8001164:	f3bf 8f6f 	isb	sy
 8001168:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <pxCurrentTCBConst>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f01e 0f10 	tst.w	lr, #16
 8001170:	bf08      	it	eq
 8001172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800117a:	6010      	str	r0, [r2, #0]
 800117c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001184:	f380 8811 	msr	BASEPRI, r0
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f000 fc78 	bl	8001a84 <vTaskSwitchContext>
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	f380 8811 	msr	BASEPRI, r0
 800119c:	bc08      	pop	{r3}
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	6808      	ldr	r0, [r1, #0]
 80011a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011a6:	f01e 0f10 	tst.w	lr, #16
 80011aa:	bf08      	it	eq
 80011ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80011b0:	f380 8809 	msr	PSP, r0
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w

080011c0 <pxCurrentTCBConst>:
 80011c0:	20003c48 	.word	0x20003c48

080011c4 <SysTick_Handler>:
{
 80011c4:	b508      	push	{r3, lr}
	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80011d6:	f000 faeb 	bl	80017b0 <xTaskIncrementTick>
 80011da:	b118      	cbz	r0, 80011e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <SysTick_Handler+0x28>)
 80011de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80011e4:	2300      	movs	r3, #0
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	bd08      	pop	{r3, pc}
 80011ec:	e000ed04 	.word	0xe000ed04

080011f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <vPortSetupTimerInterrupt+0x1c>)
 80011f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <vPortSetupTimerInterrupt+0x20>)
 80011fe:	3b01      	subs	r3, #1
 8001200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <vPortSetupTimerInterrupt+0x24>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	e000e014 	.word	0xe000e014
 8001214:	e000e010 	.word	0xe000e010

08001218 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001218:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <xPortStartScheduler+0xc8>)
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <xPortStartScheduler+0xcc>)
{
 800121c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	4291      	cmp	r1, r2
 8001222:	d108      	bne.n	8001236 <xPortStartScheduler+0x1e>
	__asm volatile
 8001224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001228:	f383 8811 	msr	BASEPRI, r3
 800122c:	f3bf 8f6f 	isb	sy
 8001230:	f3bf 8f4f 	dsb	sy
 8001234:	e7fe      	b.n	8001234 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <xPortStartScheduler+0xd0>)
 800123a:	429a      	cmp	r2, r3
 800123c:	d108      	bne.n	8001250 <xPortStartScheduler+0x38>
 800123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	e7fe      	b.n	800124e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <xPortStartScheduler+0xd4>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001258:	22ff      	movs	r2, #255	; 0xff
 800125a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800125c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800125e:	4a24      	ldr	r2, [pc, #144]	; (80012f0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001266:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800126a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800126e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <xPortStartScheduler+0xdc>)
 8001272:	2207      	movs	r2, #7
 8001274:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001276:	2100      	movs	r1, #0
 8001278:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800127c:	0600      	lsls	r0, r0, #24
 800127e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001282:	d423      	bmi.n	80012cc <xPortStartScheduler+0xb4>
 8001284:	b101      	cbz	r1, 8001288 <xPortStartScheduler+0x70>
 8001286:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800128c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001290:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001292:	9b01      	ldr	r3, [sp, #4]
 8001294:	4a15      	ldr	r2, [pc, #84]	; (80012ec <xPortStartScheduler+0xd4>)
 8001296:	b2db      	uxtb	r3, r3
 8001298:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <xPortStartScheduler+0xe0>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80012a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80012aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80012ac:	f7ff ffa0 	bl	80011f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <xPortStartScheduler+0xe4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80012b6:	f7ff fee9 	bl	800108c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80012ba:	4a11      	ldr	r2, [pc, #68]	; (8001300 <xPortStartScheduler+0xe8>)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80012c2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80012c4:	f7ff fed2 	bl	800106c <prvPortStartFirstTask>
	prvTaskExitError();
 80012c8:	f7ff feb8 	bl	800103c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	f88d 2003 	strb.w	r2, [sp, #3]
 80012d8:	2101      	movs	r1, #1
 80012da:	4622      	mov	r2, r4
 80012dc:	e7cc      	b.n	8001278 <xPortStartScheduler+0x60>
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	410fc271 	.word	0x410fc271
 80012e8:	410fc270 	.word	0x410fc270
 80012ec:	e000e400 	.word	0xe000e400
 80012f0:	20000028 	.word	0x20000028
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	e000ed20 	.word	0xe000ed20
 80012fc:	20000004 	.word	0x20000004
 8001300:	e000ef34 	.word	0xe000ef34

08001304 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001304:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <prvInsertBlockIntoFreeList+0x40>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4282      	cmp	r2, r0
 800130c:	d318      	bcc.n	8001340 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800130e:	685c      	ldr	r4, [r3, #4]
 8001310:	1919      	adds	r1, r3, r4
 8001312:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001314:	bf01      	itttt	eq
 8001316:	6841      	ldreq	r1, [r0, #4]
 8001318:	4618      	moveq	r0, r3
 800131a:	1909      	addeq	r1, r1, r4
 800131c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800131e:	6844      	ldr	r4, [r0, #4]
 8001320:	1901      	adds	r1, r0, r4
 8001322:	428a      	cmp	r2, r1
 8001324:	d107      	bne.n	8001336 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <prvInsertBlockIntoFreeList+0x44>)
 8001328:	6809      	ldr	r1, [r1, #0]
 800132a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800132c:	bf1f      	itttt	ne
 800132e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001330:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001332:	1909      	addne	r1, r1, r4
 8001334:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001336:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001338:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800133a:	bf18      	it	ne
 800133c:	6018      	strne	r0, [r3, #0]
 800133e:	bd10      	pop	{r4, pc}
 8001340:	4613      	mov	r3, r2
 8001342:	e7e1      	b.n	8001308 <prvInsertBlockIntoFreeList+0x4>
 8001344:	20003c40 	.word	0x20003c40
 8001348:	20000030 	.word	0x20000030

0800134c <pvPortMalloc>:
{
 800134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001350:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001352:	f000 fa25 	bl	80017a0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001356:	493e      	ldr	r1, [pc, #248]	; (8001450 <pvPortMalloc+0x104>)
 8001358:	4d3e      	ldr	r5, [pc, #248]	; (8001454 <pvPortMalloc+0x108>)
 800135a:	680b      	ldr	r3, [r1, #0]
 800135c:	bb0b      	cbnz	r3, 80013a2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001360:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001362:	bf1f      	itttt	ne
 8001364:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001366:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800136a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800136e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001370:	bf14      	ite	ne
 8001372:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001374:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001378:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800137a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800137c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001380:	4e36      	ldr	r6, [pc, #216]	; (800145c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001382:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001384:	2000      	movs	r0, #0
 8001386:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001388:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800138a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800138c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800138e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001390:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001394:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001396:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <pvPortMalloc+0x118>)
 800139a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800139c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013a0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80013a2:	682f      	ldr	r7, [r5, #0]
 80013a4:	4227      	tst	r7, r4
 80013a6:	d116      	bne.n	80013d6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80013a8:	2c00      	cmp	r4, #0
 80013aa:	d041      	beq.n	8001430 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80013ac:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80013b0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80013b2:	bf1c      	itt	ne
 80013b4:	f023 0307 	bicne.w	r3, r3, #7
 80013b8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013ba:	b163      	cbz	r3, 80013d6 <pvPortMalloc+0x8a>
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <pvPortMalloc+0x118>)
 80013be:	6816      	ldr	r6, [r2, #0]
 80013c0:	42b3      	cmp	r3, r6
 80013c2:	4690      	mov	r8, r2
 80013c4:	d807      	bhi.n	80013d6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80013c6:	4a25      	ldr	r2, [pc, #148]	; (800145c <pvPortMalloc+0x110>)
 80013c8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013ca:	6868      	ldr	r0, [r5, #4]
 80013cc:	4283      	cmp	r3, r0
 80013ce:	d804      	bhi.n	80013da <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80013d0:	6809      	ldr	r1, [r1, #0]
 80013d2:	428d      	cmp	r5, r1
 80013d4:	d107      	bne.n	80013e6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80013d6:	2400      	movs	r4, #0
 80013d8:	e02a      	b.n	8001430 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013da:	682c      	ldr	r4, [r5, #0]
 80013dc:	2c00      	cmp	r4, #0
 80013de:	d0f7      	beq.n	80013d0 <pvPortMalloc+0x84>
 80013e0:	462a      	mov	r2, r5
 80013e2:	4625      	mov	r5, r4
 80013e4:	e7f1      	b.n	80013ca <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013e6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013e8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013ec:	1ac2      	subs	r2, r0, r3
 80013ee:	2a10      	cmp	r2, #16
 80013f0:	d90f      	bls.n	8001412 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013f4:	0741      	lsls	r1, r0, #29
 80013f6:	d008      	beq.n	800140a <pvPortMalloc+0xbe>
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	f383 8811 	msr	BASEPRI, r3
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	e7fe      	b.n	8001408 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800140a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800140c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800140e:	f7ff ff79 	bl	8001304 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001412:	4913      	ldr	r1, [pc, #76]	; (8001460 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001414:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001416:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001418:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800141a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800141c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800141e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001422:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001426:	bf38      	it	cc
 8001428:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800142a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800142c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800142e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001430:	f000 fa50 	bl	80018d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001434:	0763      	lsls	r3, r4, #29
 8001436:	d008      	beq.n	800144a <pvPortMalloc+0xfe>
 8001438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143c:	f383 8811 	msr	BASEPRI, r3
 8001440:	f3bf 8f6f 	isb	sy
 8001444:	f3bf 8f4f 	dsb	sy
 8001448:	e7fe      	b.n	8001448 <pvPortMalloc+0xfc>
}
 800144a:	4620      	mov	r0, r4
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001450:	20000030 	.word	0x20000030
 8001454:	20003c34 	.word	0x20003c34
 8001458:	20000034 	.word	0x20000034
 800145c:	20003c40 	.word	0x20003c40
 8001460:	20003c3c 	.word	0x20003c3c
 8001464:	20003c38 	.word	0x20003c38

08001468 <vPortFree>:
{
 8001468:	b510      	push	{r4, lr}
	if( pv != NULL )
 800146a:	4604      	mov	r4, r0
 800146c:	b370      	cbz	r0, 80014cc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800146e:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <vPortFree+0x68>)
 8001470:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4213      	tst	r3, r2
 8001478:	d108      	bne.n	800148c <vPortFree+0x24>
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	e7fe      	b.n	800148a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800148c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001490:	b141      	cbz	r1, 80014a4 <vPortFree+0x3c>
 8001492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001496:	f383 8811 	msr	BASEPRI, r3
 800149a:	f3bf 8f6f 	isb	sy
 800149e:	f3bf 8f4f 	dsb	sy
 80014a2:	e7fe      	b.n	80014a2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80014a4:	ea23 0302 	bic.w	r3, r3, r2
 80014a8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80014ac:	f000 f978 	bl	80017a0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <vPortFree+0x6c>)
 80014b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80014b6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014b8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80014bc:	440b      	add	r3, r1
 80014be:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014c0:	f7ff ff20 	bl	8001304 <prvInsertBlockIntoFreeList>
}
 80014c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80014c8:	f000 ba04 	b.w	80018d4 <xTaskResumeAll>
 80014cc:	bd10      	pop	{r4, pc}
 80014ce:	bf00      	nop
 80014d0:	20003c34 	.word	0x20003c34
 80014d4:	20003c38 	.word	0x20003c38

080014d8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <prvResetNextTaskUnblockTime+0x1c>)
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <prvResetNextTaskUnblockTime+0x20>)
 80014e0:	b919      	cbnz	r1, 80014ea <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80014ee:	68d2      	ldr	r2, [r2, #12]
 80014f0:	6852      	ldr	r2, [r2, #4]
 80014f2:	e7f8      	b.n	80014e6 <prvResetNextTaskUnblockTime+0xe>
 80014f4:	20003c4c 	.word	0x20003c4c
 80014f8:	20003d24 	.word	0x20003d24

080014fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001500:	4e1b      	ldr	r6, [pc, #108]	; (8001570 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001502:	681d      	ldr	r5, [r3, #0]
{
 8001504:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001506:	6830      	ldr	r0, [r6, #0]
 8001508:	3004      	adds	r0, #4
{
 800150a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800150c:	f7ff fd86 	bl	800101c <uxListRemove>
 8001510:	4633      	mov	r3, r6
 8001512:	b940      	cbnz	r0, 8001526 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001514:	6831      	ldr	r1, [r6, #0]
 8001516:	4e17      	ldr	r6, [pc, #92]	; (8001574 <prvAddCurrentTaskToDelayedList+0x78>)
 8001518:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800151a:	6832      	ldr	r2, [r6, #0]
 800151c:	2001      	movs	r0, #1
 800151e:	4088      	lsls	r0, r1
 8001520:	ea22 0200 	bic.w	r2, r2, r0
 8001524:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001526:	1c62      	adds	r2, r4, #1
 8001528:	d107      	bne.n	800153a <prvAddCurrentTaskToDelayedList+0x3e>
 800152a:	b137      	cbz	r7, 800153a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001530:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001536:	f7ff bd4e 	b.w	8000fd6 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800153a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800153c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800153e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001540:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001542:	d907      	bls.n	8001554 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <prvAddCurrentTaskToDelayedList+0x80>)
 8001546:	6810      	ldr	r0, [r2, #0]
 8001548:	6819      	ldr	r1, [r3, #0]
}
 800154a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800154e:	3104      	adds	r1, #4
 8001550:	f7ff bd4d 	b.w	8000fee <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <prvAddCurrentTaskToDelayedList+0x84>)
 8001556:	6810      	ldr	r0, [r2, #0]
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	3104      	adds	r1, #4
 800155c:	f7ff fd47 	bl	8000fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <prvAddCurrentTaskToDelayedList+0x88>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001566:	bf38      	it	cc
 8001568:	601c      	strcc	r4, [r3, #0]
 800156a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800156c:	20003d6c 	.word	0x20003d6c
 8001570:	20003c48 	.word	0x20003c48
 8001574:	20003cf4 	.word	0x20003cf4
 8001578:	20003d44 	.word	0x20003d44
 800157c:	20003c50 	.word	0x20003c50
 8001580:	20003c4c 	.word	0x20003c4c
 8001584:	20003d24 	.word	0x20003d24

08001588 <xTaskCreate>:
	{
 8001588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800158c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001590:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001592:	4650      	mov	r0, sl
	{
 8001594:	460f      	mov	r7, r1
 8001596:	4699      	mov	r9, r3
 8001598:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800159a:	f7ff fed7 	bl	800134c <pvPortMalloc>
			if( pxStack != NULL )
 800159e:	4605      	mov	r5, r0
 80015a0:	2800      	cmp	r0, #0
 80015a2:	f000 8096 	beq.w	80016d2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80015a6:	2054      	movs	r0, #84	; 0x54
 80015a8:	f7ff fed0 	bl	800134c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80015ac:	4604      	mov	r4, r0
 80015ae:	2800      	cmp	r0, #0
 80015b0:	f000 808c 	beq.w	80016cc <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80015b4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80015b8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80015ba:	4455      	add	r5, sl
 80015bc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015be:	f025 0a07 	bic.w	sl, r5, #7
 80015c2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80015c6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015c8:	7859      	ldrb	r1, [r3, #1]
 80015ca:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80015ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80015d2:	b109      	cbz	r1, 80015d8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d4:	42bb      	cmp	r3, r7
 80015d6:	d1f7      	bne.n	80015c8 <xTaskCreate+0x40>
 80015d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80015da:	2d06      	cmp	r5, #6
 80015dc:	bf28      	it	cs
 80015de:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015e0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015e4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80015e6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80015e8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015ea:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015ec:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80015f0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015f4:	f7ff fcec 	bl	8000fd0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015f8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015fc:	f104 0018 	add.w	r0, r4, #24
 8001600:	f7ff fce6 	bl	8000fd0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001604:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001608:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800160a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800160c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800160e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001612:	464a      	mov	r2, r9
 8001614:	4641      	mov	r1, r8
 8001616:	4650      	mov	r0, sl
 8001618:	f7ff fd42 	bl	80010a0 <pxPortInitialiseStack>
 800161c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800161e:	b106      	cbz	r6, 8001622 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001620:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001622:	f7ff fd67 	bl	80010f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001626:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001628:	4e32      	ldr	r6, [pc, #200]	; (80016f4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001720 <xTaskCreate+0x198>
 8001630:	3201      	adds	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001634:	6835      	ldr	r5, [r6, #0]
 8001636:	2d00      	cmp	r5, #0
 8001638:	d14e      	bne.n	80016d8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800163a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d11d      	bne.n	800167e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001642:	eb08 0005 	add.w	r0, r8, r5
 8001646:	3514      	adds	r5, #20
 8001648:	f7ff fcb7 	bl	8000fba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800164c:	2d8c      	cmp	r5, #140	; 0x8c
 800164e:	d1f8      	bne.n	8001642 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001650:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001724 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001654:	4d28      	ldr	r5, [pc, #160]	; (80016f8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001656:	4648      	mov	r0, r9
 8001658:	f7ff fcaf 	bl	8000fba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff fcac 	bl	8000fba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001662:	4826      	ldr	r0, [pc, #152]	; (80016fc <xTaskCreate+0x174>)
 8001664:	f7ff fca9 	bl	8000fba <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <xTaskCreate+0x178>)
 800166a:	f7ff fca6 	bl	8000fba <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800166e:	4825      	ldr	r0, [pc, #148]	; (8001704 <xTaskCreate+0x17c>)
 8001670:	f7ff fca3 	bl	8000fba <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <xTaskCreate+0x180>)
 8001676:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <xTaskCreate+0x184>)
 800167c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001680:	4924      	ldr	r1, [pc, #144]	; (8001714 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001682:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001684:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001686:	3301      	adds	r3, #1
 8001688:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800168a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800168c:	2501      	movs	r5, #1
 800168e:	fa05 f302 	lsl.w	r3, r5, r2
 8001692:	4303      	orrs	r3, r0
 8001694:	2014      	movs	r0, #20
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	fb00 8002 	mla	r0, r0, r2, r8
 800169c:	4639      	mov	r1, r7
 800169e:	f7ff fc9a 	bl	8000fd6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80016a2:	f7ff fd49 	bl	8001138 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <xTaskCreate+0x190>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b163      	cbz	r3, 80016c6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016ac:	6833      	ldr	r3, [r6, #0]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d207      	bcs.n	80016c6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <xTaskCreate+0x194>)
 80016b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	f3bf 8f6f 	isb	sy
	}
 80016c6:	4628      	mov	r0, r5
 80016c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80016cc:	4628      	mov	r0, r5
 80016ce:	f7ff fecb 	bl	8001468 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016d2:	f04f 35ff 	mov.w	r5, #4294967295
 80016d6:	e7f6      	b.n	80016c6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <xTaskCreate+0x190>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ce      	bne.n	800167e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016e0:	6833      	ldr	r3, [r6, #0]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016e6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80016e8:	bf98      	it	ls
 80016ea:	6034      	strls	r4, [r6, #0]
 80016ec:	e7c7      	b.n	800167e <xTaskCreate+0xf6>
 80016ee:	bf00      	nop
 80016f0:	20003ce0 	.word	0x20003ce0
 80016f4:	20003c48 	.word	0x20003c48
 80016f8:	20003d0c 	.word	0x20003d0c
 80016fc:	20003d2c 	.word	0x20003d2c
 8001700:	20003d58 	.word	0x20003d58
 8001704:	20003d44 	.word	0x20003d44
 8001708:	20003c4c 	.word	0x20003c4c
 800170c:	20003c50 	.word	0x20003c50
 8001710:	20003cf0 	.word	0x20003cf0
 8001714:	20003cf4 	.word	0x20003cf4
 8001718:	20003d40 	.word	0x20003d40
 800171c:	e000ed04 	.word	0xe000ed04
 8001720:	20003c54 	.word	0x20003c54
 8001724:	20003cf8 	.word	0x20003cf8

08001728 <vTaskStartScheduler>:
{
 8001728:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <vTaskStartScheduler+0x60>)
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2400      	movs	r4, #0
 8001730:	9400      	str	r4, [sp, #0]
 8001732:	4623      	mov	r3, r4
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	4915      	ldr	r1, [pc, #84]	; (800178c <vTaskStartScheduler+0x64>)
 8001738:	4815      	ldr	r0, [pc, #84]	; (8001790 <vTaskStartScheduler+0x68>)
 800173a:	f7ff ff25 	bl	8001588 <xTaskCreate>
	if( xReturn == pdPASS )
 800173e:	2801      	cmp	r0, #1
 8001740:	d114      	bne.n	800176c <vTaskStartScheduler+0x44>
 8001742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <vTaskStartScheduler+0x6c>)
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <vTaskStartScheduler+0x70>)
 800175c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <vTaskStartScheduler+0x74>)
 8001760:	601c      	str	r4, [r3, #0]
}
 8001762:	b002      	add	sp, #8
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001768:	f7ff bd56 	b.w	8001218 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800176c:	3001      	adds	r0, #1
 800176e:	d108      	bne.n	8001782 <vTaskStartScheduler+0x5a>
 8001770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001774:	f383 8811 	msr	BASEPRI, r3
 8001778:	f3bf 8f6f 	isb	sy
 800177c:	f3bf 8f4f 	dsb	sy
 8001780:	e7fe      	b.n	8001780 <vTaskStartScheduler+0x58>
}
 8001782:	b002      	add	sp, #8
 8001784:	bd10      	pop	{r4, pc}
 8001786:	bf00      	nop
 8001788:	20003d20 	.word	0x20003d20
 800178c:	08001f64 	.word	0x08001f64
 8001790:	08001a0d 	.word	0x08001a0d
 8001794:	20003d24 	.word	0x20003d24
 8001798:	20003d40 	.word	0x20003d40
 800179c:	20003d6c 	.word	0x20003d6c

080017a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80017a0:	4a02      	ldr	r2, [pc, #8]	; (80017ac <vTaskSuspendAll+0xc>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20003cec 	.word	0x20003cec

080017b0 <xTaskIncrementTick>:
{
 80017b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017b4:	4b3c      	ldr	r3, [pc, #240]	; (80018a8 <xTaskIncrementTick+0xf8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d153      	bne.n	8001864 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80017bc:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <xTaskIncrementTick+0xfc>)
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80017c2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80017c4:	b9bc      	cbnz	r4, 80017f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <xTaskIncrementTick+0x100>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	b142      	cbz	r2, 80017e0 <xTaskIncrementTick+0x30>
 80017ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d2:	f383 8811 	msr	BASEPRI, r3
 80017d6:	f3bf 8f6f 	isb	sy
 80017da:	f3bf 8f4f 	dsb	sy
 80017de:	e7fe      	b.n	80017de <xTaskIncrementTick+0x2e>
 80017e0:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <xTaskIncrementTick+0x104>)
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	6018      	str	r0, [r3, #0]
 80017e8:	6011      	str	r1, [r2, #0]
 80017ea:	4a33      	ldr	r2, [pc, #204]	; (80018b8 <xTaskIncrementTick+0x108>)
 80017ec:	6813      	ldr	r3, [r2, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	f7ff fe71 	bl	80014d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80017f6:	4d31      	ldr	r5, [pc, #196]	; (80018bc <xTaskIncrementTick+0x10c>)
 80017f8:	4f31      	ldr	r7, [pc, #196]	; (80018c0 <xTaskIncrementTick+0x110>)
 80017fa:	682b      	ldr	r3, [r5, #0]
 80017fc:	429c      	cmp	r4, r3
 80017fe:	f04f 0b00 	mov.w	fp, #0
 8001802:	d33e      	bcc.n	8001882 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001804:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80018b0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001808:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80018d0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800180c:	f8d8 2000 	ldr.w	r2, [r8]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	bb72      	cbnz	r2, 8001872 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	602a      	str	r2, [r5, #0]
					break;
 800181a:	e032      	b.n	8001882 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800181c:	f106 0a04 	add.w	sl, r6, #4
 8001820:	4650      	mov	r0, sl
 8001822:	f7ff fbfb 	bl	800101c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001826:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001828:	b119      	cbz	r1, 8001832 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800182a:	f106 0018 	add.w	r0, r6, #24
 800182e:	f7ff fbf5 	bl	800101c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001832:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001834:	f8d9 3000 	ldr.w	r3, [r9]
 8001838:	2201      	movs	r2, #1
 800183a:	fa02 f100 	lsl.w	r1, r2, r0
 800183e:	4319      	orrs	r1, r3
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <xTaskIncrementTick+0x114>)
 8001842:	f8c9 1000 	str.w	r1, [r9]
 8001846:	f04f 0e14 	mov.w	lr, #20
 800184a:	4651      	mov	r1, sl
 800184c:	fb0e 3000 	mla	r0, lr, r0, r3
 8001850:	f7ff fbc1 	bl	8000fd6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001854:	6838      	ldr	r0, [r7, #0]
 8001856:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001858:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800185a:	4291      	cmp	r1, r2
 800185c:	bf28      	it	cs
 800185e:	f04f 0b01 	movcs.w	fp, #1
 8001862:	e7d3      	b.n	800180c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <xTaskIncrementTick+0x118>)
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800186c:	f04f 0b00 	mov.w	fp, #0
 8001870:	e011      	b.n	8001896 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001872:	f8d8 2000 	ldr.w	r2, [r8]
 8001876:	68d2      	ldr	r2, [r2, #12]
 8001878:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800187a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800187c:	428c      	cmp	r4, r1
 800187e:	d2cd      	bcs.n	800181c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001880:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <xTaskIncrementTick+0x114>)
 8001886:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001888:	2214      	movs	r2, #20
 800188a:	434a      	muls	r2, r1
 800188c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800188e:	2a02      	cmp	r2, #2
 8001890:	bf28      	it	cs
 8001892:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001896:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <xTaskIncrementTick+0x11c>)
 8001898:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800189a:	2a00      	cmp	r2, #0
 800189c:	bf18      	it	ne
 800189e:	f04f 0b01 	movne.w	fp, #1
}
 80018a2:	4658      	mov	r0, fp
 80018a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a8:	20003cec 	.word	0x20003cec
 80018ac:	20003d6c 	.word	0x20003d6c
 80018b0:	20003c4c 	.word	0x20003c4c
 80018b4:	20003c50 	.word	0x20003c50
 80018b8:	20003d28 	.word	0x20003d28
 80018bc:	20003d24 	.word	0x20003d24
 80018c0:	20003c48 	.word	0x20003c48
 80018c4:	20003c54 	.word	0x20003c54
 80018c8:	20003ce8 	.word	0x20003ce8
 80018cc:	20003d70 	.word	0x20003d70
 80018d0:	20003cf4 	.word	0x20003cf4

080018d4 <xTaskResumeAll>:
{
 80018d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80018d8:	4c31      	ldr	r4, [pc, #196]	; (80019a0 <xTaskResumeAll+0xcc>)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	b943      	cbnz	r3, 80018f0 <xTaskResumeAll+0x1c>
 80018de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f3bf 8f6f 	isb	sy
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	e7fe      	b.n	80018ee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80018f0:	f7ff fc00 	bl	80010f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018fa:	6824      	ldr	r4, [r4, #0]
 80018fc:	b12c      	cbz	r4, 800190a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80018fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001900:	f7ff fc1a 	bl	8001138 <vPortExitCritical>
}
 8001904:	4620      	mov	r0, r4
 8001906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <xTaskResumeAll+0xd0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f5      	beq.n	80018fe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001912:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80019bc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001916:	4f24      	ldr	r7, [pc, #144]	; (80019a8 <xTaskResumeAll+0xd4>)
 8001918:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80019c0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800191c:	f8d9 3000 	ldr.w	r3, [r9]
 8001920:	b9e3      	cbnz	r3, 800195c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001922:	b10c      	cbz	r4, 8001928 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001924:	f7ff fdd8 	bl	80014d8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001928:	4d20      	ldr	r5, [pc, #128]	; (80019ac <xTaskResumeAll+0xd8>)
 800192a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800192c:	b144      	cbz	r4, 8001940 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800192e:	4e20      	ldr	r6, [pc, #128]	; (80019b0 <xTaskResumeAll+0xdc>)
 8001930:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001932:	f7ff ff3d 	bl	80017b0 <xTaskIncrementTick>
 8001936:	b100      	cbz	r0, 800193a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001938:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800193a:	3c01      	subs	r4, #1
 800193c:	d1f9      	bne.n	8001932 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800193e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <xTaskResumeAll+0xdc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0da      	beq.n	80018fe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <xTaskResumeAll+0xe0>)
 800194a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001958:	2401      	movs	r4, #1
 800195a:	e7d1      	b.n	8001900 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800195c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001960:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001962:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001964:	f104 0018 	add.w	r0, r4, #24
 8001968:	f7ff fb58 	bl	800101c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800196c:	4630      	mov	r0, r6
 800196e:	f7ff fb55 	bl	800101c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001972:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	2501      	movs	r5, #1
 8001978:	fa05 f302 	lsl.w	r3, r5, r2
 800197c:	2014      	movs	r0, #20
 800197e:	430b      	orrs	r3, r1
 8001980:	fb00 8002 	mla	r0, r0, r2, r8
 8001984:	4631      	mov	r1, r6
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	f7ff fb25 	bl	8000fd6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <xTaskResumeAll+0xe4>)
 800198e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001996:	bf24      	itt	cs
 8001998:	4b05      	ldrcs	r3, [pc, #20]	; (80019b0 <xTaskResumeAll+0xdc>)
 800199a:	601d      	strcs	r5, [r3, #0]
 800199c:	e7be      	b.n	800191c <xTaskResumeAll+0x48>
 800199e:	bf00      	nop
 80019a0:	20003cec 	.word	0x20003cec
 80019a4:	20003ce0 	.word	0x20003ce0
 80019a8:	20003cf4 	.word	0x20003cf4
 80019ac:	20003ce8 	.word	0x20003ce8
 80019b0:	20003d70 	.word	0x20003d70
 80019b4:	e000ed04 	.word	0xe000ed04
 80019b8:	20003c48 	.word	0x20003c48
 80019bc:	20003d2c 	.word	0x20003d2c
 80019c0:	20003c54 	.word	0x20003c54

080019c4 <vTaskDelay>:
	{
 80019c4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80019c6:	b940      	cbnz	r0, 80019da <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <vTaskDelay+0x40>)
 80019ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <vTaskDelay+0x44>)
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	b141      	cbz	r1, 80019f2 <vTaskDelay+0x2e>
 80019e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e4:	f383 8811 	msr	BASEPRI, r3
 80019e8:	f3bf 8f6f 	isb	sy
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	e7fe      	b.n	80019f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80019f2:	f7ff fed5 	bl	80017a0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80019f6:	f7ff fd81 	bl	80014fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80019fa:	f7ff ff6b 	bl	80018d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0e2      	beq.n	80019c8 <vTaskDelay+0x4>
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	e000ed04 	.word	0xe000ed04
 8001a08:	20003cec 	.word	0x20003cec

08001a0c <prvIdleTask>:
{
 8001a0c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a0e:	4e18      	ldr	r6, [pc, #96]	; (8001a70 <prvIdleTask+0x64>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a10:	4c18      	ldr	r4, [pc, #96]	; (8001a74 <prvIdleTask+0x68>)
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	b973      	cbnz	r3, 8001a34 <prvIdleTask+0x28>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <prvIdleTask+0x6c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d907      	bls.n	8001a2e <prvIdleTask+0x22>
				taskYIELD();
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <prvIdleTask+0x70>)
 8001a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8001a2e:	f000 f98b 	bl	8001d48 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001a32:	e7ed      	b.n	8001a10 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001a34:	f7ff feb4 	bl	80017a0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a38:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001a3a:	f7ff ff4b 	bl	80018d4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001a3e:	2d00      	cmp	r5, #0
 8001a40:	d0e7      	beq.n	8001a12 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001a42:	f7ff fb57 	bl	80010f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a46:	68f3      	ldr	r3, [r6, #12]
 8001a48:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a4a:	1d28      	adds	r0, r5, #4
 8001a4c:	f7ff fae6 	bl	800101c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <prvIdleTask+0x74>)
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001a5e:	f7ff fb6b 	bl	8001138 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001a62:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001a64:	f7ff fd00 	bl	8001468 <vPortFree>
			vPortFree( pxTCB );
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f7ff fcfd 	bl	8001468 <vPortFree>
 8001a6e:	e7d0      	b.n	8001a12 <prvIdleTask+0x6>
 8001a70:	20003d58 	.word	0x20003d58
 8001a74:	20003ce4 	.word	0x20003ce4
 8001a78:	20003c54 	.word	0x20003c54
 8001a7c:	e000ed04 	.word	0xe000ed04
 8001a80:	20003ce0 	.word	0x20003ce0

08001a84 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <vTaskSwitchContext+0x60>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <vTaskSwitchContext+0x64>)
{
 8001a8a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a8c:	b112      	cbz	r2, 8001a94 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001a8e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001a94:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <vTaskSwitchContext+0x68>)
 8001a98:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f1c3 031f 	rsb	r3, r3, #31
 8001aa4:	2214      	movs	r2, #20
 8001aa6:	4912      	ldr	r1, [pc, #72]	; (8001af0 <vTaskSwitchContext+0x6c>)
 8001aa8:	435a      	muls	r2, r3
 8001aaa:	1888      	adds	r0, r1, r2
 8001aac:	588c      	ldr	r4, [r1, r2]
 8001aae:	b944      	cbnz	r4, 8001ac2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	e7fe      	b.n	8001ac0 <vTaskSwitchContext+0x3c>
 8001ac2:	6844      	ldr	r4, [r0, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	6864      	ldr	r4, [r4, #4]
 8001ac8:	6044      	str	r4, [r0, #4]
 8001aca:	440a      	add	r2, r1
 8001acc:	4294      	cmp	r4, r2
 8001ace:	bf04      	itt	eq
 8001ad0:	6862      	ldreq	r2, [r4, #4]
 8001ad2:	6042      	streq	r2, [r0, #4]
 8001ad4:	2214      	movs	r2, #20
 8001ad6:	fb02 1303 	mla	r3, r2, r3, r1
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <vTaskSwitchContext+0x70>)
 8001ae0:	e7d6      	b.n	8001a90 <vTaskSwitchContext+0xc>
 8001ae2:	bf00      	nop
 8001ae4:	20003cec 	.word	0x20003cec
 8001ae8:	20003d70 	.word	0x20003d70
 8001aec:	20003cf4 	.word	0x20003cf4
 8001af0:	20003c54 	.word	0x20003c54
 8001af4:	20003c48 	.word	0x20003c48

08001af8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001af8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001afa:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <StartDefaultTask+0x30>)
    osDelay(500);
 8001afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b00:	f7ff fa53 	bl	8000faa <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7fe fe5a 	bl	80007c4 <HAL_GPIO_WritePin>
    osDelay(500);
 8001b10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b14:	f7ff fa49 	bl	8000faa <osDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7fe fe50 	bl	80007c4 <HAL_GPIO_WritePin>
 8001b24:	e7ea      	b.n	8001afc <StartDefaultTask+0x4>
 8001b26:	bf00      	nop
 8001b28:	40020c00 	.word	0x40020c00

08001b2c <SystemClock_Config>:
{
 8001b2c:	b530      	push	{r4, r5, lr}
 8001b2e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b30:	2230      	movs	r2, #48	; 0x30
 8001b32:	2100      	movs	r1, #0
 8001b34:	a808      	add	r0, sp, #32
 8001b36:	f000 f9f7 	bl	8001f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2214      	movs	r2, #20
 8001b3e:	a803      	add	r0, sp, #12
 8001b40:	f000 f9f2 	bl	8001f28 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	2400      	movs	r4, #0
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <SystemClock_Config+0x90>)
 8001b48:	9401      	str	r4, [sp, #4]
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <SystemClock_Config+0x94>)
 8001b5e:	9402      	str	r4, [sp, #8]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b72:	2309      	movs	r3, #9
 8001b74:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b86:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b88:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b90:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b92:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b94:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b96:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b98:	f7fe fe40 	bl	800081c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bac:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bae:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bb4:	f7fe ffe2 	bl	8000b7c <HAL_RCC_ClockConfig>
}
 8001bb8:	b015      	add	sp, #84	; 0x54
 8001bba:	bd30      	pop	{r4, r5, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <main>:
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc8:	4c55      	ldr	r4, [pc, #340]	; (8001d20 <main+0x15c>)
 8001bca:	2500      	movs	r5, #0
  HAL_Init();
 8001bcc:	f7fe fc88 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8001bd0:	f7ff ffac 	bl	8001b2c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	2214      	movs	r2, #20
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	a807      	add	r0, sp, #28
 8001bda:	f000 f9a5 	bl	8001f28 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bde:	9501      	str	r5, [sp, #4]
 8001be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001be2:	4850      	ldr	r0, [pc, #320]	; (8001d24 <main+0x160>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6323      	str	r3, [r4, #48]	; 0x30
 8001bea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf4:	9502      	str	r5, [sp, #8]
 8001bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6323      	str	r3, [r4, #48]	; 0x30
 8001bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c08:	9503      	str	r5, [sp, #12]
 8001c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	6323      	str	r3, [r4, #48]	; 0x30
 8001c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	9303      	str	r3, [sp, #12]
 8001c1a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	9504      	str	r5, [sp, #16]
 8001c1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6323      	str	r3, [r4, #48]	; 0x30
 8001c26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	9304      	str	r3, [sp, #16]
 8001c2e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	9505      	str	r5, [sp, #20]
 8001c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6323      	str	r3, [r4, #48]	; 0x30
 8001c3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	9305      	str	r3, [sp, #20]
 8001c42:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c44:	9506      	str	r5, [sp, #24]
 8001c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6323      	str	r3, [r4, #48]	; 0x30
 8001c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c50:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001c54:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001c58:	f44f 417f 	mov.w	r1, #65280	; 0xff00
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5c:	2603      	movs	r6, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001c60:	f64f 77ff 	movw	r7, #65535	; 0xffff
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001c64:	f7fe fdae 	bl	80007c4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c68:	a907      	add	r1, sp, #28
 8001c6a:	482f      	ldr	r0, [pc, #188]	; (8001d28 <main+0x164>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001c6c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c72:	f7fe fcc7 	bl	8000604 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	a907      	add	r1, sp, #28
 8001c78:	482c      	ldr	r0, [pc, #176]	; (8001d2c <main+0x168>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001c7a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f7fe fcc0 	bl	8000604 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001c84:	f649 73ff 	movw	r3, #40959	; 0x9fff
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	a907      	add	r1, sp, #28
 8001c8a:	4829      	ldr	r0, [pc, #164]	; (8001d30 <main+0x16c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001c8c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f7fe fcb7 	bl	8000604 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	a907      	add	r1, sp, #28
 8001c98:	4826      	ldr	r0, [pc, #152]	; (8001d34 <main+0x170>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001c9a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f7fe fcaf 	bl	8000604 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001ca6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	a907      	add	r1, sp, #28
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001cae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb6:	f7fe fca5 	bl	8000604 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cba:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbc:	a907      	add	r1, sp, #28
 8001cbe:	4819      	ldr	r0, [pc, #100]	; (8001d24 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001cc0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc6:	f7fe fc9d 	bl	8000604 <HAL_GPIO_Init>
  hiwdg.Instance = IWDG;
 8001cca:	481b      	ldr	r0, [pc, #108]	; (8001d38 <main+0x174>)
  hiwdg.Init.Reload = 4095;
 8001ccc:	491b      	ldr	r1, [pc, #108]	; (8001d3c <main+0x178>)
 8001cce:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001cd2:	2206      	movs	r2, #6
 8001cd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001cd8:	f7fe fd79 	bl	80007ce <HAL_IWDG_Init>
  if( 1 == IsAfterRebootIWDG()){
 8001cdc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001cde:	0098      	lsls	r0, r3, #2
 8001ce0:	d50f      	bpl.n	8001d02 <main+0x13e>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ce2:	463a      	mov	r2, r7
 8001ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ce8:	480e      	ldr	r0, [pc, #56]	; (8001d24 <main+0x160>)
 8001cea:	f7fe fd6b 	bl	80007c4 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8001cee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cf2:	f7fe fc21 	bl	8000538 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <main+0x160>)
 8001cfe:	f7fe fd61 	bl	80007c4 <HAL_GPIO_WritePin>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d02:	4d0f      	ldr	r5, [pc, #60]	; (8001d40 <main+0x17c>)
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	ac07      	add	r4, sp, #28
 8001d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	a807      	add	r0, sp, #28
 8001d12:	f7ff f932 	bl	8000f7a <osThreadCreate>
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <main+0x180>)
 8001d18:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001d1a:	f7ff f929 	bl	8000f70 <osKernelStart>
 8001d1e:	e7fe      	b.n	8001d1e <main+0x15a>
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	20003d7c 	.word	0x20003d7c
 8001d3c:	40003000 	.word	0x40003000
 8001d40:	08001f50 	.word	0x08001f50
 8001d44:	20003d78 	.word	0x20003d78

08001d48 <vApplicationIdleHook>:
	HAL_IWDG_Refresh(&hiwdg);
 8001d48:	4801      	ldr	r0, [pc, #4]	; (8001d50 <vApplicationIdleHook+0x8>)
 8001d4a:	f7fe bd61 	b.w	8000810 <HAL_IWDG_Refresh>
 8001d4e:	bf00      	nop
 8001d50:	20003d7c 	.word	0x20003d7c

08001d54 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001d54:	6802      	ldr	r2, [r0, #0]
 8001d56:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001d5c:	f7fe bbda 	b.w	8000514 <HAL_IncTick>
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40001400 	.word	0x40001400

08001d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_MspInit+0x40>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d72:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d76:	6459      	str	r1, [r3, #68]	; 0x44
 8001d78:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d7a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001d7e:	9100      	str	r1, [sp, #0]
 8001d80:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	9201      	str	r2, [sp, #4]
 8001d84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d86:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001d8a:	6419      	str	r1, [r3, #64]	; 0x40
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d94:	210f      	movs	r1, #15
 8001d96:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d9c:	f7fe fbf2 	bl	8000584 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da0:	b003      	add	sp, #12
 8001da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001dae:	4601      	mov	r1, r0
{
 8001db0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8001db2:	2200      	movs	r2, #0
 8001db4:	2037      	movs	r0, #55	; 0x37
 8001db6:	f7fe fbe5 	bl	8000584 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8001dba:	2037      	movs	r0, #55	; 0x37
 8001dbc:	f7fe fc16 	bl	80005ec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001dc0:	2500      	movs	r5, #0
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <HAL_InitTick+0x6c>)
 8001dc4:	9502      	str	r5, [sp, #8]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001dc8:	4c14      	ldr	r4, [pc, #80]	; (8001e1c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001dca:	f042 0220 	orr.w	r2, r2, #32
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dd8:	a901      	add	r1, sp, #4
 8001dda:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001ddc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dde:	f7fe ff77 	bl	8000cd0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001de2:	f7fe ff65 	bl	8000cb0 <HAL_RCC_GetPCLK1Freq>
  htim7.Instance = TIM7;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_InitTick+0x74>)
 8001de8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001dea:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001dee:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001df0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_InitTick+0x78>)
 8001df4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001df8:	3801      	subs	r0, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 8001dfa:	6060      	str	r0, [r4, #4]
  htim7.Init.ClockDivision = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001dfc:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8001dfe:	6125      	str	r5, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001e02:	f7ff f899 	bl	8000f38 <HAL_TIM_Base_Init>
 8001e06:	b920      	cbnz	r0, 8001e12 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7fe ff80 	bl	8000d0e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001e0e:	b009      	add	sp, #36	; 0x24
 8001e10:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001e12:	2001      	movs	r0, #1
 8001e14:	e7fb      	b.n	8001e0e <HAL_InitTick+0x62>
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	20003d88 	.word	0x20003d88
 8001e20:	40001400 	.word	0x40001400
 8001e24:	000f4240 	.word	0x000f4240

08001e28 <NMI_Handler>:
 8001e28:	4770      	bx	lr

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	e7fe      	b.n	8001e2c <MemManage_Handler>

08001e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler>

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	4770      	bx	lr

08001e34 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e34:	4801      	ldr	r0, [pc, #4]	; (8001e3c <TIM7_IRQHandler+0x8>)
 8001e36:	f7fe bf79 	b.w	8000d2c <HAL_TIM_IRQHandler>
 8001e3a:	bf00      	nop
 8001e3c:	20003d88 	.word	0x20003d88

08001e40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	490f      	ldr	r1, [pc, #60]	; (8001e80 <SystemInit+0x40>)
 8001e42:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <SystemInit+0x44>)
 8001e50:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e52:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001e5a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e66:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <SystemInit+0x48>)
 8001e6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e72:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e74:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e7a:	608b      	str	r3, [r1, #8]
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	24003010 	.word	0x24003010

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e92:	e003      	b.n	8001e9c <LoopCopyDataInit>

08001e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9a:	3104      	adds	r1, #4

08001e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea4:	d3f6      	bcc.n	8001e94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea8:	e002      	b.n	8001eb0 <LoopFillZerobss>

08001eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eac:	f842 3b04 	str.w	r3, [r2], #4

08001eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb4:	d3f9      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ffc3 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f000 f811 	bl	8001ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fe81 	bl	8001bc4 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ec8:	08001fa0 	.word	0x08001fa0
  ldr  r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ed4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ed8:	20003dc4 	.word	0x20003dc4

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <__libc_init_array>:
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	4e0d      	ldr	r6, [pc, #52]	; (8001f18 <__libc_init_array+0x38>)
 8001ee4:	4c0d      	ldr	r4, [pc, #52]	; (8001f1c <__libc_init_array+0x3c>)
 8001ee6:	1ba4      	subs	r4, r4, r6
 8001ee8:	10a4      	asrs	r4, r4, #2
 8001eea:	2500      	movs	r5, #0
 8001eec:	42a5      	cmp	r5, r4
 8001eee:	d109      	bne.n	8001f04 <__libc_init_array+0x24>
 8001ef0:	4e0b      	ldr	r6, [pc, #44]	; (8001f20 <__libc_init_array+0x40>)
 8001ef2:	4c0c      	ldr	r4, [pc, #48]	; (8001f24 <__libc_init_array+0x44>)
 8001ef4:	f000 f820 	bl	8001f38 <_init>
 8001ef8:	1ba4      	subs	r4, r4, r6
 8001efa:	10a4      	asrs	r4, r4, #2
 8001efc:	2500      	movs	r5, #0
 8001efe:	42a5      	cmp	r5, r4
 8001f00:	d105      	bne.n	8001f0e <__libc_init_array+0x2e>
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f08:	4798      	blx	r3
 8001f0a:	3501      	adds	r5, #1
 8001f0c:	e7ee      	b.n	8001eec <__libc_init_array+0xc>
 8001f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f12:	4798      	blx	r3
 8001f14:	3501      	adds	r5, #1
 8001f16:	e7f2      	b.n	8001efe <__libc_init_array+0x1e>
 8001f18:	08001f98 	.word	0x08001f98
 8001f1c:	08001f98 	.word	0x08001f98
 8001f20:	08001f98 	.word	0x08001f98
 8001f24:	08001f9c 	.word	0x08001f9c

08001f28 <memset>:
 8001f28:	4402      	add	r2, r0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memset+0xa>
 8001f30:	4770      	bx	lr
 8001f32:	f803 1b01 	strb.w	r1, [r3], #1
 8001f36:	e7f9      	b.n	8001f2c <memset+0x4>

08001f38 <_init>:
 8001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3a:	bf00      	nop
 8001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f3e:	bc08      	pop	{r3}
 8001f40:	469e      	mov	lr, r3
 8001f42:	4770      	bx	lr

08001f44 <_fini>:
 8001f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f46:	bf00      	nop
 8001f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4a:	bc08      	pop	{r3}
 8001f4c:	469e      	mov	lr, r3
 8001f4e:	4770      	bx	lr
